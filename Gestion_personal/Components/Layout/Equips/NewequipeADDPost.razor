@using GestionPersonnel.Models.Employe
@using GestionPersonnel.Models.EmplyeeEquipe
@using GestionPersonnel.Models.Equipe
@using GestionPersonnel.Services
@using GestionPersonnel.Services.EquipeServices
@inject IPosteService PosteService
@inject IEquipeService EquipeService
@inject IEmployeService EmployeService

<div class="modal-overlay" style="@DisplayStyle">
    <div class="modal-content">
        <span class="close-btn" @onclick="Hide">&times;</span>
        <h3>Ajouter Post</h3>

        <form @onsubmit="HandleSubmit">
            <label>Date De Fin De Poste</label>
            <input type="date" @bind="DateFin" required />

            <label>ID Post</label>
            <input type="text" @bind="IdPoste" required />

            <label>Choisir L'Equipe</label>
            <select @onchange="OnEquipeChanged">
                <option value="">-- Choisir L'Equipe --</option>
                @if (equipes != null && equipes.Any())
                {
                    @foreach (var equipe in equipes)
                    {
                        <option value="@equipe.EquipeID">@equipe.NomEquipe</option>
                    }
                }
                else
                {
                    <option>-- Aucune Equipe Disponible --</option>
                }
            </select>

            <label>Choisir Les Membres Qui Finissent Le Post</label>
            @if (employees != null)
            {
                @foreach (var employe in employees)
                {
                    <label>
                        <input type="checkbox" value="@employe.EmployeID" @onclick="() => ToggleEmployeeSelection(employe.EmployeID)" />
                        @employe.Nom @employe.Prenom
                    </label>
                    <br />
                }
            }
            else
            {
                <p>Loading employees...</p>
            }

            <button type="submit">Ajouter Poste</button>
        </form>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    private List<Employe> employees;
    private List<Equipe> equipes;
    private List<EmployeeEquipe> employeeequipe;
    private List<int> SelectedEmployeeIds { get; set; } = new List<int>();
    private string DisplayStyle => IsVisible ? "display: flex;" : "display: none;";
    private void Hide() => OnClose.InvokeAsync();
    private DateTime? DateFin { get; set; }

    private string IdPoste { get; set; }
    private int? SelectedEquipeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        equipes = await EquipeService.GetAllEquipesAsync();

    }
    protected override async Task OnParametersSetAsync()
    {

        if (IsVisible)
        {
            equipes = await EquipeService.GetAllEquipesAsync();
        }
    }
    private async Task OnEquipeChanged(ChangeEventArgs e)
    {
        
        var selectedEquipeId = e.Value.ToString();
        SelectedEquipeId = int.TryParse(selectedEquipeId, out var id) ? id : (int?)null;
        Console.WriteLine(selectedEquipeId);
       
        if (SelectedEquipeId.HasValue)
        {
            employees = await EquipeService.GetEmployeesByEquipeIdAsync(SelectedEquipeId.Value);
        }
    }

    private void ToggleEmployeeSelection(int employeeId)
    {
        if (SelectedEmployeeIds.Contains(employeeId))
        {
            SelectedEmployeeIds.Remove(employeeId); 
        }
        else
        {
            SelectedEmployeeIds.Add(employeeId); 
        }
    }

    private async Task HandleSubmit()
    {
        if (!string.IsNullOrEmpty(IdPoste) && SelectedEquipeId.HasValue && SelectedEmployeeIds.Any())
        {
            // Ensure DateFin is not null before calling the service
            await PosteService.InsererDonneesPoste(IdPoste, SelectedEquipeId.Value, DateFin ?? DateTime.MinValue, SelectedEmployeeIds);
            Hide();
        }
        else
        {
            // Handle form validation if necessary
            Console.WriteLine("Please fill in all the fields.");
            Hide();
        }
       
    }

    
}


<style>
    /* The modal overlay */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* semi-transparent background */
        display: none; /* Hidden by default, visible when 'display: flex;' is applied */
        justify-content: center;
        align-items: center;
        z-index: 1000; /* Ensure modal is on top of other content */
        transition: opacity 0.3s ease-in-out; /* Smooth fade-in/fade-out transition */
    }

    /* Modal content */
    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        width: 400px;
        max-width: 90%;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    /* Close button */
    .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 1.5em;
        cursor: pointer;
    }

    /* Form styling */
    form {
        display: flex;
        flex-direction: column;
    }

        form label {
            margin: 10px 0 5px;
        }

        form input,
        form select {
            padding: 8px;
            margin-bottom: 10px;
            border-radius: 4px;
            border: 1px solid #ccc;
        }

        form button {
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            form button:hover {
                background-color: #0056b3;
            }

    /* Optional: Add some spacing around checkbox labels */
    .checkbox-item {
        margin-bottom: 8px;
    }

</style>