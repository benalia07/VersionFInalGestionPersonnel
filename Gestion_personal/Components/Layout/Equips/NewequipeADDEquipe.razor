@using GestionPersonnel.Models.EmplyeeEquipe
@using GestionPersonnel.Models.Equipe
@using GestionPersonnel.Services
@using GestionPersonnel.Models
@using GestionPersonnel.Models.Fonctions
@using GestionPersonnel.Services.EquipeServices
@inject IEmployeService EmployeService
@inject IFonctionService FonctionService
@inject IEquipeService EquipeService
@inject IEmployeeEquipeService EmployeeEquipeService
@rendermode InteractiveServer

<div class="modal-overlay" style="@DisplayStyle">
    <div class="modal-content">
  
        <span class="close-btn" @onclick="Hide">&times;</span>
        <h3>Ajouter Equipe</h3>

        <form class="form-container" @onsubmit="HandleSubmit">
          
            <div class="form-group">
                <label>Nom D'Equipe</label>
                <input type="text" class="form-control" placeholder="Nom D'Equipe" @bind="equipeName" required/>
            </div>

           
            <div class="form-group">
                <label>Choisir Fonction</label>
                <select class="form-control" @onchange="OnFonctionChange" required>
                    <option value="">-- Choisir Fonction --</option>
                    @if (fonctions != null && fonctions.Any())
                    {
                        @foreach (var fonction in fonctions)
                        {
                            <option value="@fonction.FonctionID" aria-required>@fonction.NomFonction</option>
                        }
                    }
                    else
                    {
                        <option value="0">-- Aucun Fonction disponible --</option>
                    }
                </select>
            </div>

           
            <div class="form-group">
                <label>Choisir Le Chef D'equipe</label>
                <select class="form-control" @bind="selectedChefId" required>
                    <option value="0">-- Choisir Chef D'equipe --</option>
                    @if (filteredEmployes != null && filteredEmployes.Any())
                    {
                        @foreach (var employe in filteredEmployes)
                        {
                            <option value="@employe.EmployeID" aria-required>@employe.Nom @employe.Prenom</option>
                        }
                    }
                    else
                    {
                        <option value="0">-- Aucun employé trouvé --</option>
                    }
                </select>
            </div>


            <div class="form-group">
                <label>Choisir Les Membres D'equipe</label>
                <div class="checkbox-group scrollable">
                    @if (filteredEmployes != null && filteredEmployes.Any())
                    {
                    @foreach (var employe in filteredEmployes)
                    {
                    <label>
                        <input type="checkbox"
                               @bind="employeeSelection[employe.EmployeID]" />
                        @employe.Nom @employe.Prenom
                    </label>
                    }
                    }
                    else
                    {
                    <p>Aucun employé disponible</p>
                    }
                </div>
            </div>



            <div class="form-group">
                <button type="submit" class="btn-submit">Ajouter Equipe</button>
            </div>
        </form>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private string keyframes;
    private List<Employe> employes;
    private List<Fonction> fonctions;
    private List<Employe> filteredEmployes;
    private string equipeName;
    private string selectedFonctionId;
    private int selectedChefId { get; set; } = 0;
    private Dictionary<int, bool> employeeSelection = new Dictionary<int, bool>();

    private string DisplayStyle => IsVisible ? "display: flex;" : "display: none;";

    protected override async Task OnInitializedAsync()
    {
        employes = await EmployeService.GetEmployeesAsync();
        fonctions = await FonctionService.GetAllAsync();
        filteredEmployes = employes;

      
        employeeSelection = employes.ToDictionary(emp => emp.EmployeID, emp => false);
    }


    private async Task OnFonctionChange(ChangeEventArgs e)
    {
        selectedFonctionId = e.Value?.ToString();

        if (!string.IsNullOrEmpty(selectedFonctionId))
        {
            filteredEmployes = employes.Where(emp => emp.FonctionID == int.Parse(selectedFonctionId)).ToList();
        }
        else
        {
            filteredEmployes = employes;
        }

        employeeSelection = filteredEmployes.ToDictionary(emp => emp.EmployeID, emp => false);
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(equipeName))
            {
                Console.Error.WriteLine("Nom d'Equipe is required.");
                return;
            }

            if (selectedChefId == 0)
            {
                Console.Error.WriteLine("Chef d'Equipe must be selected.");
                return;
            }

            Equipe newEquipe = new Equipe
            {
                NomEquipe = equipeName,
                ChefEquipeID = selectedChefId,
                Status = 1
            };

            int equipeId = await EquipeService.Add(newEquipe);

            List<int> selectedEmployeeIds = employeeSelection
                .Where(emp => emp.Value)
                .Select(emp => emp.Key)
                .ToList();

            if (selectedEmployeeIds.Any())
            {
                await EmployeeEquipeService.AddEmployeesToEquipeAsync(equipeId, selectedEmployeeIds);
            }

            Console.WriteLine("Equipe and its members added successfully!");

          
            equipeName = string.Empty;
            selectedChefId = 0;
            employeeSelection = employes.ToDictionary(emp => emp.EmployeID, emp => false);

            Hide();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error adding equipe: {ex.Message}");
        }
    }

    private void Hide() => OnClose.InvokeAsync();
}


<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        width: 450px;
        max-width: 90%;
        padding: 30px;
        position: relative;
        animation: slide-down 0.4s ease-out;
    }

    @keyframes slide-down {
        from {
            transform: translateY(-50px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        color: #555;
        cursor: pointer;
        transition: color 0.3s ease;
    }

    .close-btn:hover {
        color: #e74c3c;
    }

    h3 {
        margin-bottom: 20px;
        text-align: center;
        color: #333;
    }

    .form-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-control {
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 5px;
        outline: none;
        transition: border-color 0.3s ease;
    }

    .form-control:focus {
        border-color: #3498db;
    }

    .checkbox-group {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .checkbox-item {
        display: flex;
        align-items: center;
    }

    .checkbox-item input {
        margin-right: 10px;
    }

    .btn-submit {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        width: 100%;
        font-size: 16px;
    }

    .btn-submit:hover {
        background-color: #2980b9;
    }
    .scrollable {
        max-height: 200px; /* Adjust this value as needed */
        overflow-y: auto;
        border: 1px solid #ccc; /* Optional: Add a border for better visibility */
        padding: 5px; /* Optional: Add padding for better spacing */
    }

</style>