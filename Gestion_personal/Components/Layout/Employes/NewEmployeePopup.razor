@using GestionPersonnel.Models.Employe
@using GestionPersonnel.Models.Fonctions
@using GestionPersonnel.Services
@inject IEmployeService EmployeService
@inject IFonctionService FonctionService

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Employe> OnSave { get; set; }
    [Parameter] public Employe Employee { get; set; } = new Employe();
    private List<Fonction> fonctions;
    private bool isSubmitting;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {


    }
    protected override async Task OnParametersSetAsync()
    {

        if (IsVisible)
        {
            fonctions = await FonctionService.GetAllAsync();
        }
    }

    private string DisplayStyle => IsVisible ? "display: flex;" : "display: none;";
    private void ResetForm()
    {
        Employee = new Employe();
        Employee.DateDeNaissance = DateTime.Today;
        Employee.DateEntree = DateTime.Today;

        Employee.Photo = System.IO.File.ReadAllBytes("wwwroot/images/default-employee.png");
    }

    private void Hide()
    {  
        ResetForm(); 
        OnClose.InvokeAsync();
        Employee.DateDeNaissance = DateTime.Today;
        Employee.DateEntree = DateTime.Today;
    }

    private async Task HandleSubmit()
    {
      
        if (isSubmitting) return;

        isSubmitting = true;
        errorMessage = null;


        if (Employee.Photo == null || Employee.Photo.Length == 0)
        {
            var defaultPhoto = System.IO.File.ReadAllBytes("wwwroot/images/default-employee.png");
            Employee.Photo = defaultPhoto;
        }


        if (string.IsNullOrWhiteSpace(Employee.Nom) ||
            string.IsNullOrWhiteSpace(Employee.Prenom) ||
            Employee.DateDeNaissance == default ||
            Employee.DateEntree == default)
        {
            errorMessage = "Veuillez remplir tous les champs obligatoires.";
            isSubmitting = false; 
            return;
        }

        if (Employee.DateDeNaissance < new DateTime(1753, 1, 1) ||
            Employee.DateDeNaissance > new DateTime(9999, 12, 31) ||
            Employee.DateEntree < new DateTime(1753, 1, 1) ||
            Employee.DateEntree > new DateTime(9999, 12, 31))
        {
            errorMessage = "Veuillez remplir tous les champs obligatoires.";
            isSubmitting = false;
            return;
        }

        try
        {
            
            await OnSave.InvokeAsync(Employee);
            showSuccessPopup();
            Hide(); 
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while saving the employee: " + ex.Message;
            Console.WriteLine("Error: " + errorMessage);
        }
        finally
        {
            isSubmitting = false;
        }
    }



    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using (var stream = new MemoryStream())
            {
                await file.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024).CopyToAsync(stream);
                Employee.Photo = stream.ToArray();
            }
        }
    }

    private bool isSuccessPopupVisible = false;
    private void HideSuccessPopup() => isSuccessPopupVisible = false;
    private void showSuccessPopup() => isSuccessPopupVisible = true;


   
}

<div class="popup-overlay" style="@DisplayStyle">
    <div class="popup-content">
        <h3>Ajouter Employe</h3>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        <form @onsubmit="HandleSubmit">
            <div class="form-grid">
               
               

                
                <div class="form-group" style="grid-area: nom;">
        <label for="Nom">Nom:</label>
        <input id="Nom" type="text" @bind="Employee.Nom" class="form-control" required />
    </div>
    <div class="form-group" style="grid-area: prenom;">
        <label for="Prenom">Prenom:</label>
        <input id="Prenom" type="text" @bind="Employee.Prenom" class="form-control" required />
    </div>
     <div class="form-group photo-group" style="grid-area: photo;">
        <label>Photo:</label>
        <div class="photo-card">
         
             <InputFile id="file-upload" OnChange="HandleFileSelected" accept=".png, .jpg, .jpeg" style="display: none;" />
            
            @if (Employee.Photo != null && Employee.Photo.Length > 0)
            {
                <img src="data:image/jpeg;base64,@Convert.ToBase64String(Employee.Photo)" alt="Employee Photo" class="uploaded-photo" />
            }
            else
            {
                <img src="images/default-employee.png" alt="Default Employee Photo" class="uploaded-photo" />
            }
        </div>
             <label for="file-upload" class="upload-button">Choose Photo</label>
    </div>
                <div class="form-group">
                    <label for="DateNaissance">Date de Naissance:</label>
                    <input id="DateNaissance" type="date" @bind="Employee.DateDeNaissance" class="form-control" required />
                </div>
                <div class="form-group">
                    <label for="DateEntree">Date Entree:</label>
                    <input id="DateEntree" type="date" @bind="Employee.DateEntree" class="form-control" required />
                </div>
                <div class="form-group">
                    <label for="NSecuriteSocial">N Sécurité Sociale:</label>
                    <input id="NSecuriteSocial" type="text" @bind="Employee.NSecuriteSocial" class="form-control" required />
                </div>
                <div class="form-group">
                    <label for="GroupSanguin">Group Sanguin:</label>
                    <select id="GroupSanguin" @bind="Employee.GroupSanguin" class="form-control" required>
                        <option value="">-- Select Blood Type --</option>
                        <option value="O+">O+</option>
                        <option value="O-">O-</option>
                        <option value="A+">A+</option>
                        <option value="A-">A-</option>
                        <option value="B+">B+</option>
                        <option value="B-">B-</option>
                        <option value="AB+">AB+</option>
                        <option value="AB-">AB-</option>
                    </select>
                </div>

                <div class="form-group">
    <label for="FonctionID">Fonction:</label>
    <select id="FonctionID" @bind="Employee.FonctionID" class="form-control" required>
        <option value="">-- Select Fonction --</option>
        @if (fonctions != null && fonctions.Any())
        {
            @foreach (var fonction in fonctions)
            {
                <option value="@fonction.FonctionID">@fonction.NomFonction</option>
            }
        }
        else
        {
            <option value="">No functions available</option> 
        }
    </select>
</div>

                <div class="form-group">
                    <label for="Adresse">Adresse:</label>
                    <input id="Adresse" type="text" @bind="Employee.Adresse" class="form-control" required />
                </div>
                <div class="form-group">
                    <label for="NTelephone">N Telephone:</label>
                    <input id="NTelephone" type="text" @bind="Employee.NTelephone" class="form-control" required />
                </div>
                <div class="form-group">
                    <label for="SitiationFamiliale">Situation Familiale:</label> 
                    <select id="SitiationFamiliale" @bind="Employee.SitiationFamiliale" class="form-control" required>
                        <option value="">-- Select Situation Type --</option>
                        <option value="Célibataire">Célibataire</option>
                        <option value="Marié">Marié</option>
                        <option value="Divorcé">Divorcé</option>
                        <option value="Veuf">Veuf</option>
                       
                    </select>
                
                </div>


            </div>

            <div class="button-group">
                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Hide">Cancel</button>
            </div>
        </form>
    </div>
</div>
<button onclick="@showSuccessPopup"></button>
<SuccessPopup IsVisible="isSuccessPopupVisible" OnClose="HideSuccessPopup" />


<style>
    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .popup-content {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        width: 80%;
        max-width: 900px;
        max-height: 700px;
        overflow-y: auto;
    }

     .form-grid {
        display: grid;
        grid-template-areas: 
            "nom photo"
            "prenom photo";
        gap: 10px;
    }


    .form-group {
        display: flex;
        flex-direction: column;
    }

    .photo-group {
        grid-column: span 2;
    }
     .form-group[style*="grid-area: nom"] {
        grid-area: nom;
    }
    
    .form-group[style*="grid-area: prenom"] {
        grid-area: prenom;
    }
   .photo-card {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 10px;
        background-color: #f9f9f9;
        text-align: center;
    }
     .form-group.photo-group {
        grid-area: photo;
    }
    .upload-button {
    cursor: pointer;
    color: #fff;
    background-color: #007bff;
    border: 1px solid #007bff;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    border-radius: 0.25rem; 
    transition: background-color 0.15s ease, border-color 0.15s ease;
}



    .uploaded-photo {
        max-width: 100px;
        max-height: 100px;
        margin-top: 10px;
    }

    .button-group {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }
    .upload-button:hover {
    color: #0056b3; 
    text-decoration: none;

</style> 